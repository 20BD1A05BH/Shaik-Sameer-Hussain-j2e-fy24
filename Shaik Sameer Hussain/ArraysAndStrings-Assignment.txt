ARRAYS&STRINGS ASSIGNMENT

PROBLEM-1

class Solution {
     public List<Boolean> kidsWithCandies(int[] candies, int ecandies) {
        int max = 0;
        int n = candies.length;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, candies[i]);
        }
        List<Boolean> resultList = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            resultList.add(ecandies + candies[i] >= max);
        }
        return resultList;
    }
}



PROBLEM-2

class Solution {
    public int maxArea(int[] h) {
        int ans=0;
        int i=0;
        int j=h.length-1;
        while(i<j){
            if(h[i]>h[j]){
                ans=Math.max(h[j]*(j-i),ans);
                j--;
            }
            else if(h[i]<=h[j]){
                ans=Math.max(h[i]*(j-i),ans);
                i++;
            }
        }
        return ans;
    }
}

PROBLEM-3


class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int i=0;
        int j;
        int k;
        int ans=nums[0]+nums[1]+nums[2];
        int diff=Math.abs(target-ans);
        while(i<nums.length-2){
            j=i+1;
            k=nums.length-1;
            while(j<k){
                int sum=nums[i]+nums[j]+nums[k];
                int currdiff=Math.abs(target-sum);
                if(currdiff<diff){
                    diff=currdiff;
                    ans=sum;
                }
                if(target<sum){
                    k--;
                }
                else if(target>sum){
                    j++;
                }
                else if(target==sum){
                    return sum;
                }
            }
            i++;
        }
        return ans;
    }
}



PROBLEM-4

class Solution {
    public void nextPermutation(int[] nums) {
        if(nums.length==0 || nums.length==1){
            return;
        }
        int i=nums.length-2;
        while(i>=0){
            if(nums[i]>=nums[i+1]){
                i--;
            }
            else 
                break;
        }
        System.out.println("i "+i);
        int j=nums.length-1;
        if(i>=0){
            while(j>=i){
                if(nums[j]<=nums[i]){
                    j--;
                }
                else{
                    break;
                }
            }
            swap(nums,i,j);
        }
        System.out.println("j "+j);
        reverse(nums,i+1,nums.length-1);
    }
    public void swap(int nums[],int i,int j){
        
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
    public void reverse(int[]nums,int i,int j){
        while(i<=j){
            swap(nums,i++,j--);
        }
    }
}


PROBLEM-5


class Solution {
    public int search(int[] nums, int target) {
        int low=0,high=nums.length-1;
        return binarySearch(nums,low,high,target);
    }
    public int binarySearch(int[] nums,int low,int high,int target){
        int mid=(low+high)/2,left=-1,right=-1;
        if(low<=high){
            if(nums[mid]==target)
                return mid;
            else{
                left=binarySearch(nums,low,mid-1,target);
                right=binarySearch(nums,mid+1,high,target);
            }
        }
        return Math.max(left,right);
    }
}


PROBLEM-6

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        	Arrays.sort(nums);
		List<Integer>l=new ArrayList<>();
		int b[]=new int[nums.length];
		List<List<Integer>>ll=new ArrayList<>();
		permuteunique(nums,l,ll,b);
		return ll;

    }
    public static void permuteunique(int[] nums,List<Integer>l,List<List<Integer>>ll,int[] b){
        if(nums.length==l.size()){
            ll.add(new ArrayList<>(l));
            return ;
        }
        for(int i=0;i<nums.length;i++){
            if(b[i]==0){
                l.add(nums[i]);
                b[i]=1;
                permuteunique(nums,l,ll,b);
                b[i]=0;
                l.remove(l.size()-1);
            	while(i+1<nums.length && nums[i]==nums[i+1]){
                		i++;
            }	}
        }
    }
}


PROBLEM-7

class Solution {
    public int maxSubArray(int[] arr) {
        int n=arr.length;
        int sum=0;
        int ans=arr[0];
        int j=0;
        int k=0;
        int count=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];

            if(sum>ans){
                count=Math.max(count,Math.abs(i-j+1));

                ans=sum;
            }
            if(sum<0){
                sum=0;
                j=i+1;
            }
        }
        System.out.println("count is "+count);
        return ans;
    }
}


PROBLEM-8

class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]>l=new ArrayList<>();
        Arrays.sort(intervals,(a,b)->a[0]-b[0]);
        int s=intervals[0][0];
        int e=intervals[0][1];
        for(int []i:intervals)
        {
                if(e>=i[0])
                {
                	e=Math.max(e,i[1]);
                }
                else{

                  l.add(new int[]{s,e});
                  s=i[0];
                  e=i[1];
                }
        }
        l.add(new int[]{s,e});
       return l.toArray(new int[0][]);
    }
}


PROBLEM-9

class Solution {
    public void sortColors(int[] a) {
        int i=0;
        int low=0;
        int high=a.length-1;
        while(i<=high){
            if(a[i]==0){
                swap(a,i,low);
                low=low+1;
                i=i+1;
            }
            else if(a[i]==2){
                swap(a,i,high);
                high=high-1;
            }
            else{
                i=i+1;
            }
        }
        
    }
    public void swap(int[] a,int i,int j){
        int temp=a[i];
        a[i]=a[j];
        a[j]=temp;
    }
}

PROBLEM -10

class BuySellStock {
    public static int buyAndSellStocks(int prices[]){
        int buyPrice=Integer.MAX_VALUE;
        int maxProfit=0;
        //note:prices[i] means selling prices(the given array)
        for(int i=0;i<prices.length;i++){
            if(buyPrice<prices[i]){//profit
                int profit=prices[i]-buyPrice;//today's profit
                maxProfit=Math.max(maxProfit,profit);
            }else{
                buyPrice=prices[i];
            }
        }
        return maxProfit;
    }
    public static void main(String[] args) {
        int prices[]={7,1,5,3,6,4};//output 6-1=5
        System.out.println(buyAndSellStocks(prices));
    }
}


PROBLEM-11

class Solution {
    public int findPeakElement(int[] nums) {
        int s=0;
        int e=nums.length-1;
        while(s<e)
        {
            int m=s+(e-s)/2;
            if(nums[m]<nums[m+1])
            {
                s=m+1;
            }
            else{
                e=m;
            }
        }
        return s;
    }

}

PROBLEM-12

import java.util.*;
class MedianofSortedArrays{
public static int median(int a[],int b[]){
if(a.length>b.length){
return median(b,a);
}
int n1=a.length;
int n2=b.length;
int l=0;
int h=n1;
while(l<=h){
int c1=(l+h)/2;
int c2=(n1+n2+1)/2-c1;
int l1=c1==0?Integer.MIN_VALUE:a[c1-1];
int r1=c1==n1?Integer.MAX_VALUE:a[c1];
int l2=c2==0?Integer.MIN_VALUE:b[c2-1];
int r2=c2==n2?Integer.MAX_VALUE:b[c2];
if(l1<=r2 && l2<=r1){
if((n1+n2)%2==0){
return (Math.max(l1,l2)+Math.min(r1,r2))/2;
}
else{
return (Math.max(l1,l2));
}
}
else if(l1>r2){
h=c1-1;
}
else{
l=c1+1;
}
}
return 0;
}
public static void main(String args[]){
int num1[]=new int[]{7,12,14,15};
int num2[]=new int[]{1,2,3,4,9,11};
System.out.println(median(num1,num2));
}
}


PROBLEM-13

class Solution {
    public int maxArea(int[] h) {
        int ans=0;
        int i=0;
        int j=h.length-1;
        while(i<j){
            if(h[i]>h[j]){
                ans=Math.max(h[j]*(j-i),ans);
                j--;
            }
            else if(h[i]<=h[j]){
                ans=Math.max(h[i]*(j-i),ans);
                i++;
            }
        }
        return ans;
    }
}

PROBLEM-14

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int c=0;
        int mi=0;
        for(int i=0;i<nums.length;i++)
        {
		if(nums[i]==0)
		{
    			c=0;
		}
        	else{
            	c=c+1;
        	}
             mi=Math.max(c,mi);
        }
        return mi;
    }
}


PROBLEM-15

class Solution {
    public static int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        int j = 1;
        for(int i = nums.length - 1; i >= 0; i--) {
            if(j == k)
                return nums[i];
            j++;
        }
        return 0;
    }
}






RECURSION ASSIGNMENT 

PROBLEM-1

class sol {
static public void printAllKLength(char[] set, int k)
{
	int n = set.length;
	printAllKLengthRec(set, "", n, k);
}
static public void printAllKLengthRec(char[] set, String prefix,int n, int k){
	if (k == 0)
	{
		System.out.println(prefix);
		return;
	}
	for (int i = 0; i < n; ++i)
	{
		String newPrefix = prefix + set[i];
		printAllKLengthRec(set, newPrefix,n, k - 1);
	}
}
}

PROBLEM-2

import java.util.*;
class Solution {
    public static int uniquePaths(int m, int n) {
        int [][] strg=new int [m+1][n+1];
        strg[m-1][n-1]=1;
        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                strg[i][j]=strg[i+1][j]+strg[i][j+1]+strg[i][j];
            }
        }
        return strg[0][0];
}
}



PROBLEM-3

class Solution {
    public static void reorderList(ListNode head) {
        if(head== null || head.next == null) return ;
        ListNode curr= head;
        List<Integer> l = new ArrayList<>();
        List<Integer> l1 = new ArrayList<>();
        while(curr!=null){
            l.add(curr.val);
            curr= curr.next;
        }
        int i=0;
        int j = len(head)-1;
        while(i<=j){
            if(i!=j){
                l1.add(l.get(i));
                l1.add(l.get(j));
            }
            else{
                l1.add(l.get(i));
            }
            i++;
            j--;
        }
        i=0;
        while(head!=null){
            head.val = l1.get(i);
            head=head.next;
            i++;
            
        }
        return ;
        
    }
    public static int len(ListNode node){
        int c=0;
        while(node!=null){
            c++;
            node=node.next;
        }
        return c;
    }
}


PROBLEM-4

class Main{
public static void towerofhanoi(int n,String src,String helper,String dest){
if(n==1){
System.out.println("Move disk from rod "+src+" to rod "+dest);
return;
}
towerofhanoi(n-1,src,dest,helper);
System.out.println("Move disk from rod "+src+" to rod "+dest);
towerofhanoi(n-1,helper,src,dest);
}
public static void main(String args[]){
int n=3;
towerofhanoi(n,"1","2","3");
}
}

PROBLEM -5

import java.util.*;
class Solution {
    public static List<TreeNode> find(int n){
        List<TreeNode>list=new ArrayList<>();
        if(n==1){list.add(new TreeNode(0));return list;}
        for(int i=1;i<n;i+=2){
            List<TreeNode>left=find(i);
            List<TreeNode>right=find(n-i-1);
            for(TreeNode l : left)
                for(TreeNode r : right){
                    TreeNode root=new TreeNode(0,l,r);
                    list.add(root);
                }
        }
        return list;
    }
    public static List<TreeNode> allPossibleFBT(int n) {
       if(n%2==0)return new ArrayList<>();
        return find(n);
        
    }
}

PROBLEM-6


import java.util.*;
class Main{
    static void subsetSumsHelper(int ind,int sum,int[] arr,int n,ArrayList < Integer > sumSubset){
        if(ind==n){
            sumSubset.add(sum);
            return;
        }
        // pick the element 
        subsetSumsHelper(ind+1, sum+arr[ind], arr, n, sumSubset);
        // Do-not pick the element
        subsetSumsHelper(ind+1, sum, arr, n, sumSubset);
    }
    static ArrayList<Integer> subsetSums(int[] arr,int n){
        ArrayList<Integer> sumSubset=new ArrayList<>();
        subsetSumsHelper(0, 0, arr, n, sumSubset);
        Collections.sort(sumSubset);
        return sumSubset;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        ArrayList<Integer> ans=subsetSums(arr, n);
        for (int i = 0; i < ans.size(); i++)
            System.out.print(ans.get(i) + " ");
        sc.close();
    }
}


PROBLEM -7

class KnapsackzerobyoneDP {
    //recursion
    public static int knapsack(int val[],int wt[],int W,int n){
        //base case
        if(W==0||n==0){
            return 0;
        }
        if(wt[n-1]<=W){//valid
            //include
            int ans1=val[n-1]+knapsack(val, wt, W-wt[n-1], n-1);
            //exclude
            int ans2=knapsack(val, wt, W, n-1);
            return Math.max(ans1,ans2);
        }
        else{//invalid
            return knapsack(val, wt, W, n-1);
        }
    }
	public static void main(String[] args){
        int val[]={15,14,10,45,30};
        int wt[]={2,5,1,3,4};
        int W=7;
        System.out.println(knapsack(val, wt, W, val.length));
	}
}


PROBLEM-8

class Solution {
    private List<List<String>> partitions = new ArrayList<>();
    public static List<List<String>> partition(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n]; // dp[i][j] == true if s[i:j] is a palindrome
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
            if (i < n -1 && s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = true;
            }
        }
        for (int k = 2; k < n; k++) {
            for (int i = 0, j = i + k; j < n; i++, j++) {
                if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]) {
                    dp[i][j] = true;
                }
            }
        }
        backtracking(0, 0, s, dp, new ArrayList<String>());
        return partitions;
    }
	private static void backtracking(int curr, int prev, String s, boolean[][] dp, List<String> partition) {
        if (curr == s.length()) {
            if (prev == s.length()) {
                partitions.add(new ArrayList<>(partition));
            }
            return;
        }
        if (dp[prev][curr]) {
            partition.add(s.substring(prev, curr + 1));
            backtracking(curr + 1, curr + 1, s, dp, partition);
            partition.remove(partition.size() - 1);
        }
        backtracking(curr + 1, prev, s, dp, partition);
    }
}









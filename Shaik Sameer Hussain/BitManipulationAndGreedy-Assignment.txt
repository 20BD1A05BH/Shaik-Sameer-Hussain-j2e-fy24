Bit Manipulation & Greedy Assignment


PROBLEM-1

import java.util.*;
class Fss {
    public static int cntSlice(int[] A) {
        int maxCount = 0;
        Map<Integer, Integer> weightCounts = new HashMap<>();
        for (int weight : A) {
            weightCounts.put(weight, weightCounts.getOrDefault(weight, 0) + 1);
            maxCount = Math.max(maxCount, weightCounts.get(weight));
        }
        int steps = 0;
        for (int count : weightCounts.values()) {
            steps += count == maxCount ? 1 : count;
        }
        return steps;
    }
}

PROBLEM-2

import java.util.Arrays;
class CoinChange {
    public static int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coins.length; j++) {
                if (coins[j] <= i) {
                    dp[i] = Math.min(dp[i], 1 + dp[i - coins[j]]);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
}

PROBLEM-3

class MinimumCandiesEaten {
    public static int minCandiesEaten(int[] a) {
        int n = a.length;
        int sum = 0;
        int maxCandies = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            maxCandies = Math.max(maxCandies, a[i]);
        }
        for (int i = 0; i < n; i++) {
            sum += maxCandies - a[i];
        }
        return sum;
    }
}


PROBLEM-4


import java.util.*;
class MinimumPillsToSurvive {
    public static int minPillsToSurvive(int N, int V, int[] a) {
        int[] dp = new int[V + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[V] = 0;
        for (int i = 1; i <= N; i++) {
            int[] next = new int[V + 1];
            Arrays.fill(next, Integer.MAX_VALUE);
            for (int j = 0; j <= V; j++) {
                if (dp[j] != Integer.MAX_VALUE) {
                    if (j + a[i - 1] <= V) {
                        next[j + a[i - 1]] = Math.min(next[j + a[i - 1]], dp[j]);
                    }
                    if (j - 1 >= 0) {
                        next[j - 1] = Math.min(next[j - 1], dp[j] + 1);
                    }
                }
            }
            dp = next;
        }
        int minPills = Integer.MAX_VALUE;
        for (int i = 0; i <= V; i++) {
            minPills = Math.min(minPills, dp[i]);
        }
        return minPills;
    }
    public static void main(String[] args) {
        int N1 = 5, V1 = 1;
        int[] a1 = {1, 1, 1, 1, 1};
        System.out.println(minPillsToSurvive(N1, V1, a1));
    }
}



PROBLEM-5

import java.util.*;
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<Integer> li = new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        subset(nums,0,li,ans);
        return ans;
    }
    public static void subset(int[] num,int i,List<Integer> li,List<List<Integer>> ans){
	    if(i==num.length){
	        ans.add(new ArrayList<>(li));
	        return;
	    }
	    subset(num,i+1,li,ans);
        li.add(num[i]);
	    subset(num,i+1,li,ans);
        li.remove(li.size()-1);
	}
}


PROBLEM-6

import java.util.*;
class Solution {
    public static int singleNumber(int[] nums) {
        int[] bits = new int[32];
        for(int num : nums){
            int bit = 0;
            if(num < 0) num = -num - 1;
            while(num > 0){
                bits[bit] += (1 & num);
                bit++;
                num >>= 1;
            }
        }
        int res = 0;
        for(int i=0;i<32;i++){
            bits[i] %= 3; 
            res +=  bits[i] * (1 << i);
        }
        for(int num : nums){
            if(num == res) return res;
        }
        return -res - 1;
    }
}

PROBLEM-7


class Solution {
	public static int minXOR(int arr[], int n)
	{
		int min_xor = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++)
			for (int j = i + 1; j < n; j++)
				min_xor = Math.min(min_xor, arr[i] ^ arr[j]);
		return min_xor;
	}
	public static void main(String args[])
	{
		int arr[] = { 9, 5, 3 };
		int n = arr.length;
		System.out.println(minXOR(arr, n));
	}
}





PROBLEM-8


class Solution {
    public static int singleNumber(int[] nums) {
        for(int i=0;i<nums.length;i++){
            int c=0;
            for(int j=0;j<nums.length;j++){
                if(nums[i]==nums[j]){
                    c++;
                }
            }
            if(c==1){
                return nums[i];
            }
        }
        return 0;
    }
}


PROBLEM-9

class Solution {
    public static int hammingDistance(int x, int y) {
        int result = x ^ y;
        int cnt = 0;
        while (result > 0) {
            if ((result & 1) == 1)
                cnt++;
            result = result >> 1;
        }
        
        return cnt;
    }
}

PROBLEM-10

import java.io.*;
class Solution{
	public static int reverseBits(int n)
	{
		int rev = 0;
		while (n > 0) {
			rev <<= 1;
			if ((int)(n & 1) == 1)
				rev ^= 1;
			n >>= 1;
		}
		return rev;
	}
}



